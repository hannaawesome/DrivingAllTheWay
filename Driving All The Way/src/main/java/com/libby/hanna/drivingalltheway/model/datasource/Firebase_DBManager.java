/*
Hanna Weissberg 318796398
Libby Olidort 209274612
*/
package com.libby.hanna.drivingalltheway.model.datasource;
import android.support.annotation.NonNull;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.libby.hanna.drivingalltheway.model.backend.DB_manager;
import com.libby.hanna.drivingalltheway.model.entities.*;

import java.sql.Time;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

/**
 * Class that implements DB_manager - the function addTrip
 * and puts the data on firebase database
 */
public class Firebase_DBManager implements DB_manager {

    static DatabaseReference TripRef;
    static {
        FirebaseDatabase database = FirebaseDatabase.getInstance();
        TripRef = database.getReference("trips");//root
    }
    static List<Trip> tripList=new ArrayList<Trip>();
    public static ChildEventListener tripRefChildEventListener;

    /**
     * implementation of the function addTrip
     */
    @Override
    public void addTrip(final Trip trip, final Action<String> action) {

        // Generate a reference to a new location and add some data using push()
        DatabaseReference pushedPostRef = TripRef.push();
// Get the unique ID generated by a push()
            String key =pushedPostRef.getKey();
            TripRef.child(key).setValue(trip).addOnSuccessListener(new OnSuccessListener<Void>() {
                @Override
                public void onSuccess(Void aVoid) {
                    action.onSuccess(trip.get_id());
                }
            }).addOnFailureListener(new OnFailureListener() {
                @Override
                public void onFailure(@NonNull Exception e) {
                    action.onFailure(e);
                }
            });
        //region The data that cannot enter automatically to the firebase, thus, needs to be enters manually.
        TripRef.child(key).child("start").setValue(trip.getStart().toString()).addOnSuccessListener(new OnSuccessListener<Void>() {
            @Override
            public void onSuccess(Void aVoid) {
                action.onSuccess(trip.get_id());
            }
        }).addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(@NonNull Exception e) {
                action.onFailure(e);
            }
        });
        TripRef.child(key).child("finish").setValue(trip.getFinish().toString()).addOnSuccessListener(new OnSuccessListener<Void>() {
            @Override
            public void onSuccess(Void aVoid) {
                action.onSuccess(trip.get_id());
            }
        }).addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(@NonNull Exception e) {
                action.onFailure(e);
            }
        });

        //endregion
    }
    //region notify trip list
    public static void NotifyToTripList(final NotifyDataChange<List<Trip>> notifyDataChange) {
        if (notifyDataChange != null) {
            if (tripRefChildEventListener != null) {
                notifyDataChange.onFailure(new Exception("first unNotify trip list"));
                return;
            }
            tripList.clear();
            tripRefChildEventListener = new ChildEventListener() {
                @Override
                public void onChildAdded(DataSnapshot dataSnapshot, String s) {
                    Trip t = dataSnapshot.getValue(Trip.class);
                    SimpleDateFormat format = new SimpleDateFormat("HH:mm"); // 12 hour format
                    t.set_id(dataSnapshot.getKey());
                    tripList.add(t);
                    notifyDataChange.OnDataChanged(tripList);
                }

                @Override
                public void onChildChanged(DataSnapshot dataSnapshot, String s) {
                    Trip t = dataSnapshot.getValue(Trip.class);
                    String id =dataSnapshot.getKey();
                    t.set_id(id);
                    for (int i = 0; i < tripList.size(); i++) {
                        if (tripList.get(i).get_id().equals(id)) {
                            tripList.set(i, t);
                            break;
                        }
                    }
                    notifyDataChange.OnDataChanged(tripList);
                }

                public void onChildRemoved(DataSnapshot dataSnapshot) {
                }

                public void onChildMoved(DataSnapshot dataSnapshot, String s) {
                }

                public void onCancelled(DatabaseError databaseError) {
                    notifyDataChange.onFailure(databaseError.toException());
                }
            };
            TripRef.addChildEventListener(tripRefChildEventListener);
        }
    }

    public static void stopNotifyToTripList() {
        if (tripRefChildEventListener != null) {
            TripRef.removeEventListener(tripRefChildEventListener);
            tripRefChildEventListener = null;
        }
    }
    //endregion
}

